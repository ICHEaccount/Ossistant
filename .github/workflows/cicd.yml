name: cicd

on:
  push:
    branches: [feature/OSINT-353]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup .env
        run: |
          echo "BREACHED_DIRECTORY=$BREACHED_DIRECTORY" >> ./server/osint.env
          echo "ETHERSCAN=$ETHERSCAN" >> ./server/osint.env
        env:
          BREACHED_DIRECTORY: ${{secrets.BREACHED_DIRECTORY}}
          ETHERSCAN: $${{secrets.ETHERSCAN}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Client Docker Build and Push
      - name: Build and push Client
        uses: docker/build-push-action@v2
        with:
          context: ./client
          file: ./client/client.Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ossistant-client:latest
          push-args: --disable-content-trust

      # Data Docker Build and Push
      - name: Build and push Data
        uses: docker/build-push-action@v2
        with:
          context: ./server/src
          file: ./server/src/data.Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ossistant-data:latest
          push-args: --disable-content-trust

      # OSINT Docker Build and Push
      - name: Build and push OSINT
        uses: docker/build-push-action@v2
        with:
          context: ./server/osint
          file: ./server/osint/osint.Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ossistant-osint:latest
          push-args: --disable-content-trust

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: ls -al
      - name: ssh connect & production
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            cd server
            sudo rm -rf db_conn
      - name: Upload files via scp
        uses: appleboy/scp-action@master
        with:
            host: ${{ secrets.HOST }}
            username: ${{ secrets.USERNAME }}
            password: ${{ secrets.PASSWORD }}
            source: "server/db_conn"
            target: "~/server/db_conn"
            strip_components: 2
            
      - name: ssh connect & production
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            whoami > whos
            docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password ${{ secrets.DOCKERHUB_PASSWORD }}
            docker system prune -a --volumes -f
            docker compose pull -q
            docker compose up --force-recreate -d --quiet-pull 2>log.out
            cat log.out